# Grammar for numsed Python

# Start symbol for the grammar:
file_input: (NEWLINE | stmt)* ENDMARKER

funcdef: 'def' NAME parameters ':' suite
parameters: '(' [varargslist] ')'
varargslist: fpdef (',' fpdef)* [','])
fpdef: NAME

stmt: simple_stmt | compound_stmt
simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
small_stmt: (expr_stmt | print_stmt | pass_stmt | flow_stmt | global_stmt)
expr_stmt: testlist (augassign testlist | ('=' testlist)*)
augassign: ('+=' | '-=' | '*=' | '//=' | '%=' | **=')

print_stmt: 'print' '(' [testlist] ')'
pass_stmt: 'pass'
flow_stmt: break_stmt | continue_stmt | return_stmt
break_stmt: 'break'
continue_stmt: 'continue'
return_stmt: 'return' [test]
global_stmt: 'global' NAME (',' NAME)*

compound_stmt: if_stmt | while_stmt | funcdef
if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]
while_stmt: 'while' test ':' suite ['else' ':' suite]
suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT

test: or_test ['if' or_test 'else' test]
or_test: and_test ('or' and_test)*
and_test: not_test ('and' not_test)*
not_test: 'not' not_test | comparison
comparison: expr (comp_op expr)*
comp_op: '<'|'>'|'=='|'>='|'<='|'!='

expr: arith_expr
arith_expr: term (('+'|'-') term)*
term: factor (('*'|'//'|'%'') factor)*
factor: ('+'|'-') factor | power
power: atom trailer* ['**' factor]

# STRING are allowed only as print arguments
atom: NAME | NUMBER | STRING

trailer: '(' [arglist] ')'
testlist: test (',' test)* [',']

arglist: (argument ',')* (argument [',']
argument: test